// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: testjbj.proto

#include "testjbj.pb.h"
#include "testjbj.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace T {
namespace jbj {

static const char* session_method_names[] = {
  "/T.jbj.session/Regist",
  "/T.jbj.session/Login",
};

std::unique_ptr< session::Stub> session::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< session::Stub> stub(new session::Stub(channel, options));
  return stub;
}

session::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Regist_(session_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(session_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status session::Stub::Regist(::grpc::ClientContext* context, const ::T::jbj::jbjRegist_req& request, ::T::jbj::jbjReply_res* response) {
  return ::grpc::internal::BlockingUnaryCall< ::T::jbj::jbjRegist_req, ::T::jbj::jbjReply_res, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Regist_, context, request, response);
}

void session::Stub::async::Regist(::grpc::ClientContext* context, const ::T::jbj::jbjRegist_req* request, ::T::jbj::jbjReply_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::T::jbj::jbjRegist_req, ::T::jbj::jbjReply_res, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Regist_, context, request, response, std::move(f));
}

void session::Stub::async::Regist(::grpc::ClientContext* context, const ::T::jbj::jbjRegist_req* request, ::T::jbj::jbjReply_res* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Regist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::T::jbj::jbjReply_res>* session::Stub::PrepareAsyncRegistRaw(::grpc::ClientContext* context, const ::T::jbj::jbjRegist_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::T::jbj::jbjReply_res, ::T::jbj::jbjRegist_req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Regist_, context, request);
}

::grpc::ClientAsyncResponseReader< ::T::jbj::jbjReply_res>* session::Stub::AsyncRegistRaw(::grpc::ClientContext* context, const ::T::jbj::jbjRegist_req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegistRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status session::Stub::Login(::grpc::ClientContext* context, const ::T::jbj::jbjLogin_req& request, ::T::jbj::jbjLogin_res* response) {
  return ::grpc::internal::BlockingUnaryCall< ::T::jbj::jbjLogin_req, ::T::jbj::jbjLogin_res, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void session::Stub::async::Login(::grpc::ClientContext* context, const ::T::jbj::jbjLogin_req* request, ::T::jbj::jbjLogin_res* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::T::jbj::jbjLogin_req, ::T::jbj::jbjLogin_res, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void session::Stub::async::Login(::grpc::ClientContext* context, const ::T::jbj::jbjLogin_req* request, ::T::jbj::jbjLogin_res* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::T::jbj::jbjLogin_res>* session::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::T::jbj::jbjLogin_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::T::jbj::jbjLogin_res, ::T::jbj::jbjLogin_req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::T::jbj::jbjLogin_res>* session::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::T::jbj::jbjLogin_req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

session::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      session_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< session::Service, ::T::jbj::jbjRegist_req, ::T::jbj::jbjReply_res, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](session::Service* service,
             ::grpc::ServerContext* ctx,
             const ::T::jbj::jbjRegist_req* req,
             ::T::jbj::jbjReply_res* resp) {
               return service->Regist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      session_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< session::Service, ::T::jbj::jbjLogin_req, ::T::jbj::jbjLogin_res, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](session::Service* service,
             ::grpc::ServerContext* ctx,
             const ::T::jbj::jbjLogin_req* req,
             ::T::jbj::jbjLogin_res* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

session::Service::~Service() {
}

::grpc::Status session::Service::Regist(::grpc::ServerContext* context, const ::T::jbj::jbjRegist_req* request, ::T::jbj::jbjReply_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status session::Service::Login(::grpc::ServerContext* context, const ::T::jbj::jbjLogin_req* request, ::T::jbj::jbjLogin_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace T
}  // namespace jbj

